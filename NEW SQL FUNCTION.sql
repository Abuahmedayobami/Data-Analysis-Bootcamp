STEPS IN CREATING TABLE ON SQL

--CREATING TABLE FOR INVOICEDATA
	
CREATE TABLE InvoiceData (
    InvoiceLineID SERIAL PRIMARY KEY,
    CustomerCode INT,
    TransactionID INT,
    Date DATE,
    PackageTypeID INT,
    Quantity INT,
    Sales NUMERIC(10, 2),
    TotalDryItems INT,
    TotalChillerItems INT
);
--CREATING TABLE FOR CUSTOMERMASTERDATA

CREATE TABLE CustomerMasterData (
    CustomerID SERIAL PRIMARY KEY,
    CustomerGroup VARCHAR(50),
    CustomerName VARCHAR(100),
    CustomerCategoryName VARCHAR(100),
    PrimaryContact VARCHAR(100),
    City VARCHAR(100),
    Province VARCHAR(100)
);
--Coping in values into the created tables
COPY CustomerMasterData(CustomerID, CustomerGroup, CustomerName, CustomerCategoryName, PrimaryContact, City, Province)
FROM 'C:\\Users\\USER\\Documents\\CustomerMasterData.csv' DELIMITER ',' CSV HEADER ENCODING 'LATIN1';

COPY InvoiceData(InvoiceLineID, CustomerCode, TransactionID, Date, PackageTypeID, Quantity, Sales, TotalDryItems, TotalChillerItems)
FROM 'C:\\Users\\USER\\Documents\\InvoiceData.csv' DELIMITER ',' CSV HEADER ENCODING 'LATIN1';

SELECT * FROM INVOICEDATA;

SELECT * FROM CUSTOMERMASTERDATA;

--CALACULATION FOR SALES 
SELECT MIN(SALES) FROM INVOICEDATA;
SELECT MAX(SALES) FROM INVOICEDATA;
SELECT SUM(SALES) FROM INVOICEDATA;
SELECT AVC(SALES) FROM INVOICEDATA;

--TO SAVE RESULT AS A TABLE
SELECT * 
INTO SALESGREATTHAN2000
FROM INVOICEDATA
WHERE SALES >=2000;
--TOTAL SALES AND QUANTITY

--TO VIEW TABLE
SELECT *
FROM SALESGREATTHAN2000

SELECT CUSTOMERCODE, MAX(SALES) AS MAXSALES
FROM INVOICEDATA
GROUP BY CUSTOMERCODE
HAVEING MAX(SALES) > 15000;
	
-- CALCULATION FOR QUANTITY 

SELECT MIN(QUANTITY) FROM INVOICEDATA;
SELECT MAX(QUANTITY) FROM INVOICEDATA;
SELECT SUM(QUANTITY) FROM INVOICEDATA;
SELECT AVC(QUANTITY) FROM INVOICEDATA;

SELECT * FROM INVOICEDATA
WHERE QUANTITY >=100;


SELECT CUSTOMERCODE, AVG(QUANTITY) AS AVERAGEQUANTITY
FROM INVOICEDATA
GROUP BY CUSTOMERCODE
HAVING AVG(QUANTITY) >=45;

--SUM OF TOTALDRYITEMS
SELECT SUM(TOTALDRYITEMS) AS TOTALDRYITEMS FROM INVOICEDATA;

--SUM OF TOTALCHILLERITEAMS
SELECT SUM(TOTALCHILLERITEAMS) AS TOTALALCHILLERITEMS FROM INVOICE;


--TOTAL QUANTITY AND AVG SALES BY 
SELECT EXTRACT(YEAR FROM DATE) AS YEAR,
SUM(QUANTITY) AS TOTALQUSNTITY,
AVG(SALES) AS AVGSALES
FROM INVOICEDATA
GROUP BY EXTRACT(YEARS FROM DATE)	
GROUP BY YEARS;

--HOW MANY PACKEGTYPEID
SELECT DISTINCE PACKAGETYPEID AS PACKAGETYPEID
FROM INVOICEDATA;

--TOTAL SALES AND QUANTITY BY CUSTOMERID
SELECT DISTINCT CUSTOMERCODE AS CUSTOMERID
	SUM(SALES) AS TOTALSALES,
	SUM(QUANTITY) AS TOTALQUANTITY
FROM INVOICEDATA
GROUP BY CUSTOMERCODE
ORDER BY CUSTOMERID;

--JOINING TWO TABLES TO SEE TOTAL SALES AND QUANTITY BY CUSTOMERNAME
SELECT C.CUSTOMERNAME,
SUM(I.SALES),
SUM(I.QUANTITY)
FROM INVOICEDATA I
JOIN CUSTOMERDATA C ON I.CUSTOMERCODE = C.CUSTOMERID
GROUP BY M.CUSTOMERNAME
ORDER BY M.CUSTOMERNAME;

WITH NOVELITY SHOP AS(
SELECT CUSTOMERNAME,CUSTOMERCATEGORYNAME
FROM CUSTOMERMASTERDATA
WHERE CUSTOMERCATEGORYNAME='NOVELTY SHOP'	
)
SELECT *
--INTO NOVELTY SHOP
FROM NOVELTYSHOP;


WITH SUPERMARKET AS(
SELECT CUSTOMERNAME,CUSTOMERCATEGORYNAME
FROM CUSTOMERMASTERDATA
WHERE CUSTOMERCATEGORYNAME='SUPERMARKET'	
)
SELECT *
--INTO SUPERMARKET
FROM SUPERMARKET;





--QUANTITY AND SALES BY CITY
--YOUR CITY TOTAL SALES IN CUSTOMERDATA
SELECT C.CITY,
SUM(I.SALES),
SUM(I.QUANTITY)
FROM INVOICEDATA I
JOIN CUSTOMERDATA CUSTOMERDATA ON INVOICEDATA.CUSTOMERCODE = CUSTOMERDATA.CUSTOMERID
GROUP BY CUSTOMERDATA.CITY
ORDER BY SUM(INVOICEDATA.SALES) DESC;


--QUANTITY AND SALE BY CUSTOMERCATEGORYNAMES
SELECT C.CUSTOMERCATEGORYNAME,
SUM(I.QUANTITY)
FROM INVOICEDATA I
JOIN CUSTOMERDATA C ON I.CUSTOMERCODE = C.CUSTOMERID
GROUP BY C.CUSTOMERCATEGORYNAME
ORDER BY SUM(I.SALES)DESC;

--QUANTITY SOLD AND SALES MADE BY CUSTOMERGROUP
SELECT C.CUSTOMERGROUP,
SUM(I.SALES)
FROM INVOICEDATA I
JOIN CUSTOMERDATA C ON I.CUSTOMERCODE = C.CUSTOMERID
GROUP BY C.CUSTOMERGROUP
ORDER BY SUM(I.SALES)DESC;

SELECT*
FROM CUSTOMERDATA									   
LIMIT 1O								   
									   
--QUANTITY AND SALE BY CUSTOMERDATA
--YOUR CITY TOTAL SALES IN CUSTOMERDATA
SELECT C.CITY,
SUM(I.SALES),
SUM(I.QUANTITY)
FROM INVOICEDATA I
JOIN CUSTOMERDATA C ON I.CUSTOMERCODE = C.CUSTOMERID
GROUP BY C.CITY
ORDER BY SUM(I.SALES)DESC;
							   									   									
SELECT*
FROM CUSTOMERDATA INNER JOIN CUSTOMERDATA ON CUSTOMERNAME.CUSTOMERGROUP.PRIMARYCONTACT;
										   

WITH NOVELTYSHOP AS(
   SELECT CUSTOMERNAME, C	
   FROM CUSTOMERDATA
   WHERE CUSTOMERCATEGORYNAME = 'Noveltyshop'
)
SELECT *
--INTO NOVELTY SHOP
FROM NOVELTYSHOP;

SELECT*
FROM CUSTOMERDATA

--THIS IS HOW TO CREAT THE CTE FOR SQL
WITH giftshop AS(
   SELECT CUSTOMERNAME, Customercategoryname	
   FROM CUSTOMERDATA
   WHERE CUSTOMERCATEGORYNAME = 'giftshop'
)
SELECT *
--INTO giftshop
FROM giftshop;


THIS IS HOW THE STEPS TO GET THE LIKE OPERATOR
SELECT* --CUSTOMERNAME, PROVINCE
FROM CUSTOMERDATA
WHERE PROVINCE LIKE '_%NEBRASKA_' OR CUSTOMERNAMES LIKE' %E_'





































									   
